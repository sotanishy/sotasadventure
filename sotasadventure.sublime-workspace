{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"water",
				"WATER"
			],
			[
				"Gou",
				"GROUND_CENTER"
			],
			[
				"Array",
				"ArrayList"
			],
			[
				"button",
				"buttonImages"
			],
			[
				"but",
				"buttonImages"
			],
			[
				"i",
				"i"
			],
			[
				"HILL",
				"GROUND_HILL_LEFT"
			],
			[
				"File",
				"FileOutputStream"
			],
			[
				"sampl",
				"sampleStageBtn"
			],
			[
				"hp",
				"hp"
			],
			[
				"map",
				"Map"
			],
			[
				"getS",
				"getScaledImage"
			],
			[
				"S",
				"SHIP"
			],
			[
				"Bo",
				"BorderFactory"
			],
			[
				"scale",
				"SCALE_SMOOTH"
			],
			[
				"walk",
				"WALK_POSES"
			],
			[
				"wal",
				"WALK_POSES"
			],
			[
				"jumpcu",
				"JUMP_CUTOFF"
			],
			[
				"invin",
				"INVINCIBLE_DURATION"
			],
			[
				"y",
				"y"
			],
			[
				"GROUND_HILL",
				"GROUND_HILL_LEFT"
			],
			[
				"play",
				"PLAYER_WALK"
			],
			[
				"solve",
				"solveSotasCollisionAgainstShip"
			],
			[
				"Enem",
				"EnemyShip"
			],
			[
				"enem",
				"enemyShipPosition"
			],
			[
				"ship",
				"SHIP"
			],
			[
				"defau",
				"DEFAULT_LIFE"
			],
			[
				"blueB",
				"blueBeforeI"
			],
			[
				"x",
				"x"
			],
			[
				"de",
				"denominator"
			],
			[
				"yM",
				"yMax1"
			],
			[
				"ymax",
				"yMax2"
			],
			[
				"badguy",
				"badguy_y"
			],
			[
				"bad",
				"badguy_x"
			],
			[
				"ca",
				"captain_position"
			],
			[
				"coor",
				"coordinates_q1"
			],
			[
				"captian",
				"captain_bottom"
			],
			[
				"captain",
				"captain_bottom"
			],
			[
				"badg",
				"badguy_x"
			],
			[
				"capta",
				"captain_bottom"
			],
			[
				"coordinates_",
				"coordinates_q2"
			],
			[
				"addto",
				"addToCaptainCoordinates"
			],
			[
				"cpa",
				"captain_x"
			],
			[
				"ba",
				"badguy_coordinates"
			],
			[
				"dimension",
				"dimension_x"
			],
			[
				"dime",
				"dimension_x"
			],
			[
				"captop",
				"captainTop"
			],
			[
				"reflected_",
				"reflected_badguy_x"
			],
			[
				"cl",
				"captainLeft"
			],
			[
				"shor",
				"shortestTimes"
			],
			[
				"ma",
				"MAX_VALUE"
			],
			[
				"DO",
				"DOOR_OPENED"
			],
			[
				"DOOR_",
				"DOOR_CLOSED"
			],
			[
				"curr",
				"currentStage"
			],
			[
				"gs",
				"GROUND_SURFACE"
			],
			[
				"bullet",
				"bulletPosition"
			],
			[
				"bull",
				"bulletPosition"
			],
			[
				"enemy1",
				"enemy1"
			],
			[
				"tl",
				"tileX"
			],
			[
				"ceiling",
				"ceilingRight"
			],
			[
				"Arra",
				"ArrayIndexOutOfBoundsException"
			],
			[
				"ri",
				"rightWallBottom"
			],
			[
				"max",
				"MAX_SPEED_X"
			],
			[
				"righ",
				"rightWall"
			],
			[
				"gc",
				"GROUND_CENTER"
			],
			[
				"GROUND",
				"GROUND_CENTER"
			],
			[
				"yTile",
				"yTileLeftBottom"
			],
			[
				"xTileBt",
				"xTileBottomLeft"
			],
			[
				"xTle",
				"xTileRight"
			],
			[
				"GROUNDED",
				"GROUND_EDGE_RIGHT"
			],
			[
				"center",
				"GROUND_CENTER"
			],
			[
				"tile",
				"groundTiles"
			],
			[
				"ground",
				"groundY"
			],
			[
				"playerstand",
				"PLAYER_STAND_RIGHT"
			],
			[
				"playerjump",
				"PLAYER_JUMP_LEFT"
			],
			[
				"playerjum",
				"PLAYER_JUMP_RIGHT"
			],
			[
				"MAP",
				"MAP_WIDTH"
			],
			[
				"groun",
				"groundY"
			],
			[
				"MAX_SPEED_y",
				"MAX_SPEED_Y"
			],
			[
				"grou",
				"groundY"
			],
			[
				"gru",
				"groundY"
			],
			[
				"vk",
				"VK_RIGHT"
			],
			[
				"change",
				"changeVelocity"
			],
			[
				"ra",
				"readLine"
			],
			[
				"Br",
				"BufferedReader"
			],
			[
				"initi",
				"INITIAL_Y"
			],
			[
				"b",
				"B_HEIGHT"
			],
			[
				"INITIAL",
				"INITIAL_DELAY"
			],
			[
				"initial",
				"INITIAL_X"
			],
			[
				"inita",
				"INITIAL_Y"
			],
			[
				"INITIA",
				"INITIAL_X"
			],
			[
				"Gra",
				"Graphics2D"
			],
			[
				"g",
				"Graphics"
			],
			[
				"side",
				"SIDE_CELLS"
			],
			[
				"print",
				"printArray"
			],
			[
				"set",
				"setTopFace"
			],
			[
				"top",
				"top"
			],
			[
				"sum",
				"sumOfRow"
			],
			[
				"fill",
				"fillStyle"
			],
			[
				"f",
				"f"
			],
			[
				"add",
				"addActionListener"
			],
			[
				"get",
				"getContentPane"
			],
			[
				"ce",
				"SIDE_CELLS"
			],
			[
				"Time",
				"TimerTask"
			],
			[
				"Ti",
				"TimerTask"
			],
			[
				"v",
				"vector"
			],
			[
				"ball",
				"BALL_COLOR"
			],
			[
				"BAR",
				"BAR_WIDTH"
			],
			[
				"a",
				"a"
			],
			[
				"Block",
				"BlockBreaking"
			],
			[
				"SCREEN",
				"SCREEN_WIDTH"
			],
			[
				"SCREE",
				"SCREEN_HEIGHT"
			],
			[
				"boun",
				"bounceSound"
			],
			[
				"ITE",
				"ITEM_SIZE"
			],
			[
				"I",
				"ITEM_SIZE"
			],
			[
				"BLOCK",
				"BLOCK_WIDTH"
			],
			[
				"n",
				"n"
			],
			[
				"po",
				"point"
			],
			[
				"SC",
				"SCREEN_HEIGHT"
			],
			[
				"C",
				"Color"
			],
			[
				"G",
				"GameOfLife"
			],
			[
				"len",
				"length"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/Enemy.java",
			"settings":
			{
				"buffer_size": 4311,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/MainMenuState.java",
			"settings":
			{
				"buffer_size": 2780,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Map.java",
			"settings":
			{
				"buffer_size": 12260,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Bullet.java",
			"settings":
			{
				"buffer_size": 325,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Stage.java",
			"settings":
			{
				"buffer_size": 5820,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "resources/stages.properties",
			"settings":
			{
				"buffer_size": 75309,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Sota.java",
			"settings":
			{
				"buffer_size": 9305,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/SotasAdventure.java",
			"settings":
			{
				"buffer_size": 2910,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/SpaceShip.java",
			"settings":
			{
				"buffer_size": 4268,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/StageState.java",
			"settings":
			{
				"buffer_size": 38193,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/State.java",
			"settings":
			{
				"buffer_size": 814,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/StateMachine.java",
			"settings":
			{
				"buffer_size": 2389,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Util.java",
			"settings":
			{
				"buffer_size": 1976,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Vector.java",
			"settings":
			{
				"buffer_size": 905,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/WorldMapState.java",
			"settings":
			{
				"buffer_size": 7808,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.Properties;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\nclass Test {\n    public static void main(String[] args) {\n        Properties prop = new Properties();\n        FileInputStream input = null;\n        FileOutputStream output = null;\n\n        try {\n            input = new FileInputStream(\"stages.properties\");\n            prop.load(input);\n\n            String stage = prop.getProperty(\"sampleStage\");\n\n            ArrayList<String> temp = new ArrayList<String>();\n            int count = 0, start = 0;\n            for (int i = 0; i < stage.length(); i++) {\n                if (stage.charAt(i) == '[') {\n                    start = i + 1;\n                } else if (stage.charAt(i) == ']') {\n                    temp.add(stage.substring(start, i));\n                }\n            }\n            String[] maps = temp.toArray(new String[temp.size()]);\n\n            String[][] maps2 = new String[maps.length][];\n            for (int i = 0; i < maps.length; i++) {\n                temp.clear();\n                for (int j = 0; j < maps[i].length(); j++) {\n                    if (maps[i].charAt(j) == '{') {\n                        start = j + 1;\n                    } else if (maps[i].charAt(j) == '}') {\n                        temp.add(maps[i].substring(start, j));\n                    }\n                }\n                maps2[i] = temp.toArray(new String[temp.size()]);\n            }\n\n            String[][][] maps3 = new String[maps2.length][][];\n            for (int i = 0; i < maps2.length; i++) {\n                temp.clear();\n                maps3[i] = new String[maps2[i].length][];\n                for (int j = 0; j < maps2[i].length; j++) {\n                    temp = new ArrayList<String>(Arrays.asList(maps2[i][j].split(\" \")));\n                    temp.removeAll(new ArrayList<String>(Arrays.asList(new String[] {\"\"})));\n                    maps3[i][j] = temp.toArray(new String[temp.size()]);\n                }\n            }\n\n            int[][][] intMap = new int[maps3.length][][];\n            for (int i = 0; i < maps3.length; i++) {\n                intMap[i] = new int[maps3[i].length][];\n                for (int j = 0; j < maps3[i].length; j++) {\n                    intMap[i][j] = new int[maps3[i][j].length];\n                    for (int k = 0; k < maps3[i][j].length; k++) {\n                        intMap[i][j][k] = Integer.parseInt(maps3[i][j][k]);\n                    }\n                }\n            }\n\n            int[][][] sampleStage = {\n                {\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0, 11, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0, 11,  2,  2, 10,  0,  0, 11,  1, 11,  1, 10,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  1,  2,  2,  2,  2, 10, 11,  2, 11,  2,  2,  2, 10,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  1,  1,  1,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  3,  0,  0,  0,  8,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  1,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  2,  2,  2,  0,  2,  2,  2,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 1,  1,  1,  1,  1,  1,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  1,  1,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  1,  1,  1,  2,  2,  2,  2,  2,  2,  0,  2,  2,  2,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1},\n                    { 2,  2,  2,  2,  2,  2,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  1,  1,  1,  1,  1,  2,  2,  2,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  2,  2,  2,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2},\n                    { 2,  2,  2,  2,  2,  2,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  2,  2,  2,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0} // extra\n                },\n                {\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  1,  1,  1,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  6,  5,  0,  0,  0,  0,  0,  7,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1},\n                    { 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                },\n                {\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  1,  1,  1,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  7,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                    { 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1},\n                    { 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2},\n                    { 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},\n                }\n            };\n            System.out.println(Arrays.deepEquals(intMap, sampleStage));\n\n            outside: for (int i = 0; i < intMap.length; i++) {\n                System.out.println(intMap[i].length);\n                for (int j = 0; j < intMap[i].length; j++) {\n                    for (int k = 0; k < intMap[i][j].length; k++) {\n                        if (intMap[i][j][k] != sampleStage[i][j][k]) {\n                            System.out.println(i + \" \" + j + \" \" + k);\n                            break outside;\n                        }\n                    }\n                }\n            }\n\n            input.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
			"file": "Test.java",
			"file_size": 13434,
			"file_write_time": 131447951666335205,
			"settings":
			{
				"buffer_size": 13286,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 354.0,
		"last_filter": "in",
		"selected_items":
		[
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"col",
				"ColorSchemeSelector: Select Color Scheme"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 382.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/2480s/Desktop/java/sotasadventure",
		"/C/Users/2480s/Desktop/java/sotasadventure/bin",
		"/C/Users/2480s/Desktop/java/sotasadventure/resources",
		"/C/Users/2480s/Desktop/java/sotasadventure/src"
	],
	"file_history":
	[
		"/C/Users/2480s/Desktop/java/sotasadventure/src/MainMenuState.java",
		"/C/Users/2480s/Desktop/java/sotasadventure/src/SotasAdventure.java",
		"/C/Users/2480s/Desktop/java/sotasadventure/src/State.java",
		"/C/Users/2480s/Desktop/java/sotasadventure/src/Vector.java",
		"/C/Users/2480s/Desktop/java/sotasadventure/src/StateMachine.java",
		"/C/Users/2480s/Desktop/java/sotasadventure/src/Util.java",
		"/C/Users/2480s/Desktop/java/rpg_game/State.java",
		"/C/Users/2480s/Desktop/java/rpg_game/Test.java",
		"/C/Users/2480s/Desktop/java/rpg_game/Bullet.java",
		"/C/Users/2480s/Desktop/java/rpg_game/Stage.java",
		"/C/Users/2480s/Desktop/java/rpg_game/NorthAmericaStage.java",
		"/C/Users/2480s/Desktop/java/rpg_game/SampleStage.java",
		"/C/Users/2480s/Desktop/java/rpg_game/NorthAmerica.java",
		"/C/Users/2480s/Desktop/java/rpg_game/StateMachine.java",
		"/C/Users/2480s/Desktop/java/rpg_game/Util.java",
		"/C/Users/2480s/Desktop/java/rpg_game/EnemyShip.java",
		"/C/Users/2480s/Desktop/java/rpg_game/Vector.java",
		"/C/Users/2480s/Desktop/java/rpg_game/SotasAdventure.java",
		"/C/Users/2480s/Desktop/java/rpg_game/Enemy.java",
		"/C/Users/2480s/Desktop/java/rpg_game/Map.java",
		"/C/Users/2480s/Desktop/java/rpg_game/EmptyState.java",
		"/C/Users/2480s/Desktop/password.html",
		"/C/Users/2480s/Desktop/Kickstart.java",
		"/C/Users/2480s/Desktop/Kickstart2.java",
		"/C/Users/2480s/Desktop/kickstart.java",
		"/C/Users/2480s/Desktop/GoogleChallenge.java",
		"/C/Users/2480s/Desktop/java/foobar/FoobarL4Q2.java",
		"/C/Users/2480s/Desktop/java/foobar/FoobarL4Q1.java",
		"/C/Users/2480s/Desktop/ShortestTimesFinder.java",
		"/C/Users/2480s/Desktop/java/rpg_game/StateMachinePractice.java",
		"/C/Users/2480s/Desktop/java/rpg_game/Board.java",
		"/C/Users/2480s/Desktop/java/rpg_game/Application.java",
		"/C/Users/2480s/Desktop/java/rpg_game/timertest.java",
		"/C/Users/2480s/Desktop/java/onlineJudge.java",
		"/C/Users/2480s/Desktop/js/rpg_game/main.js",
		"/C/Users/2480s/Desktop/js/rpg_game/index.html",
		"/C/Users/2480s/Desktop/java/rpg_game/Sota'sAdventure.java",
		"/C/Users/2480s/Desktop/java/rpg_game/Main.java",
		"/C/Users/2480s/Desktop/js/rpg_game/objects.js",
		"/C/Users/2480s/Desktop/java/block_breaking/BlockBreaking.java",
		"/C/Users/2480s/Desktop/java/rpg_game/RPGgame.java",
		"/C/Users/2480s/Desktop/java/app_sample/AppSample.java",
		"/C/Users/2480s/Desktop/java/codejam/codejam.java",
		"/C/Users/2480s/Desktop/java/codejam/output.txt",
		"/C/Users/2480s/Desktop/java/codejam/A-large-practice.in",
		"/C/Users/2480s/Desktop/js/app_sample/app_sample.js",
		"/C/Users/2480s/Desktop/js/app_sample/app_sample.html",
		"/C/Users/2480s/Desktop/java/codejam/practice.in",
		"/C/Users/2480s/Desktop/java/codejam.java",
		"/C/Users/2480s/Desktop/java/app_sample/TimerPractice.java",
		"/C/Users/2480s/Desktop/js/lifegame/lifegame.js",
		"/C/Users/2480s/Desktop/js/block_breaking/objects.js",
		"/C/Users/2480s/Desktop/js/block_breaking/main.js",
		"/C/Users/2480s/Desktop/final project crossword/Criss Cross Puzzle.html",
		"/C/Users/2480s/Desktop/java/block_breaking/Ball.java",
		"/C/Users/2480s/Desktop/java/block_breaking/Bar.java",
		"/C/Users/2480s/Desktop/java/BlockBreaking.java",
		"/C/Users/2480s/Desktop/js/block_breaking/index.html",
		"/C/Users/2480s/Desktop/java/Point.java",
		"/C/Users/2480s/Desktop/js/practice.html",
		"/C/Users/2480s/Desktop/java/blockBreaking.java",
		"/C/Users/2480s/Desktop/js/tic_tac_toe/main.js",
		"/C/Users/2480s/Desktop/js/tic_tac_toe/ticTacToe.html",
		"/C/Users/2480s/Desktop/js/block_breaking/common.js",
		"/C/Users/2480s/Desktop/java/GameOfLife.java",
		"/C/Users/2480s/Desktop/java/HelloWorld.java",
		"/C/Users/2480s/Desktop/java/Swing.java",
		"/C/Users/2480s/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/2480s/Desktop/java/algorithm.java",
		"/C/Users/2480s/Desktop/js/lifegame/lifegame.html",
		"/C/Users/2480s/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/2480s/AppData/Roaming/Sublime Text 3/Packages/User/myProj.sublime-project",
		"/C/Users/Public/Desktop/Eye Care Switcher.Lnk"
	],
	"find":
	{
		"height": 70.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"TILE_SIZE",
			" 0",
			"0",
			" 0",
			"0",
			" 0",
			"0",
			" 0",
			"2",
			" 0",
			" 1",
			" 0",
			"0",
			" 0",
			"0",
			" 0",
			"0",
			" 0",
			"0",
			" 0",
			"vector",
			"url",
			"12",
			"0",
			" 0",
			"0",
			"sota",
			"1",
			"enemy",
			"sota",
			"ceiling",
			"sota",
			" 0",
			"2",
			"11",
			"0",
			"2",
			"0",
			"1",
			"0",
			"1",
			"0",
			"1",
			"0",
			"1",
			"0",
			"2",
			"0",
			"1",
			"2",
			"10",
			"11",
			"sota.alive",
			"run = false",
			"sota.alive",
			"0",
			"2",
			"1",
			"0",
			"1",
			"0",
			"2",
			"1",
			"0",
			"2",
			"0",
			"2",
			"1",
			"10",
			"11",
			"2",
			"1",
			"0",
			"2",
			"0",
			"1",
			"0",
			"7",
			"1",
			"10",
			"1",
			"11",
			"8",
			"2",
			"africa",
			"stage",
			",",
			"{",
			"}",
			",",
			"currentstage",
			"currentstagename",
			"int[][][]",
			"northAmerica",
			"north",
			"currentStage",
			"font",
			"con",
			"startImage",
			"dimension",
			"btns",
			"sampleStage",
			"stageButton",
			"sampleStageBtn",
			"set",
			"currentstagename",
			"southAmerica",
			"2",
			"1",
			"0",
			"1",
			"0",
			"coin",
			"spaceShip.init",
			"spaceship.init",
			"initialposition",
			"gameclear",
			"goal",
			"1",
			"4",
			"gameclear",
			"destroyed",
			"gameclear",
			"1",
			"2",
			"1",
			"0",
			"1"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": true,
		"regex": false,
		"replace_history":
		[
			"supboy",
			"earnedGems",
			"dimensions",
			"enemies[0]",
			"TILE_SIZE",
			"screen_size",
			"apply",
			"rowNumber",
			"temp",
			"backgroundImage",
			"tmpField"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/Enemy.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4311,
						"regions":
						{
						},
						"selection":
						[
							[
								2055,
								2055
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/Java.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1122.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/MainMenuState.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2780,
						"regions":
						{
						},
						"selection":
						[
							[
								2778,
								2778
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/Java.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1961.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Map.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12260,
						"regions":
						{
						},
						"selection":
						[
							[
								12260,
								12260
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/Java.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5714.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/Bullet.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 325,
						"regions":
						{
						},
						"selection":
						[
							[
								45,
								45
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/Java.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Stage.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5820,
						"regions":
						{
						},
						"selection":
						[
							[
								5385,
								5385
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/Java.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2985.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "resources/stages.properties",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 75309,
						"regions":
						{
						},
						"selection":
						[
							[
								66493,
								66493
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/JavaProperties.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 10861.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/Sota.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9305,
						"regions":
						{
						},
						"selection":
						[
							[
								8718,
								8718
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/Java.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6681.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/SotasAdventure.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2910,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/Java.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/SpaceShip.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4268,
						"regions":
						{
						},
						"selection":
						[
							[
								2549,
								2549
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/Java.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1709.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/StageState.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38193,
						"regions":
						{
						},
						"selection":
						[
							[
								4829,
								4849
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/Java.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3623.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/State.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 814,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/Java.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/StateMachine.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2389,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/Java.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/Util.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1976,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/Java.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/Vector.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 905,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/Java.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/WorldMapState.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7808,
						"regions":
						{
						},
						"selection":
						[
							[
								1529,
								1529
							]
						],
						"settings":
						{
							"is_init_dirty_state": false,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/Java.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 873.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "Test.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13286,
						"regions":
						{
						},
						"selection":
						[
							[
								175,
								175
							]
						],
						"settings":
						{
							"is_init_dirty_state": true,
							"origin_encoding": "ASCII",
							"syntax": "Packages/Java/Java.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1518.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 67.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "sotasadventure.sublime-project",
	"replace":
	{
		"height": 58.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 187.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
